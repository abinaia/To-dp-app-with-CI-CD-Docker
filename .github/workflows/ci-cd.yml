name: 🚀 CI/CD Pipeline - CLEAN VERSION

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Testing - REDIS CLI ISSUE FREE
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        # NO health check to avoid redis-cli issues
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔧 Install Redis CLI tools (optional)
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-tools
        echo "✅ Redis CLI tools installed"
      
    - name: 🔗 Test Redis connection (Node.js only)
      run: |
        # Wait for Redis to be ready
        echo "⏳ Waiting for Redis to start..."
        sleep 15
        
        # Test Redis connection using Node.js ONLY
        echo "🧪 Testing Redis connection with Node.js..."
        node -e "
        const redis = require('redis');
        const client = redis.createClient({ url: 'redis://localhost:6379' });
        client.connect().then(() => {
          console.log('✅ Redis connection successful');
          return client.ping();
        }).then((response) => {
          console.log('✅ Redis ping response:', response);
          client.disconnect();
          process.exit(0);
        }).catch((err) => {
          console.error('❌ Redis connection failed:', err);
          process.exit(1);
        });
        "
      
    - name: 🔍 Run linting (if configured)
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npm run lint
        else
          echo "No linting configuration found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🧪 Run tests
      run: npm test
      env:
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level high
      continue-on-error: true

  # Job 3: Build Docker Image
  build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Deploy
  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying application..."
        echo "✅ Deployment completed successfully!"
